import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useRef, useState } from "react";
import { api } from "~/utils/api";

export default function Home() {
  const { data: sessionData } = useSession();
  return (
    <>
      <Head>
        <title>Create T3 App</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="flex min-h-screen w-full flex-col items-center bg-gradient-to-b from-[#2e026d] to-[#15162c] py-8">
        <div className="mx-auto flex w-full max-w-3xl flex-col items-center justify-center gap-12 px-4 py-16 ">
          <div className="flex w-full justify-between">
            <h2 className="text-white">
              {sessionData && (
                <span className=" ">
                  Logged in as{" "}
                  <span className="rounded-3xl bg-gray-600 px-2 py-1.5">
                    @{sessionData.user?.name}
                  </span>
                </span>
              )}
            </h2>
            <button
              className="rounded-full bg-white/10 px-10 py-3 font-semibold text-white no-underline transition hover:bg-white/20"
              onClick={sessionData ? () => void signOut() : () => void signIn()}
            >
              {sessionData ? "Sign out" : "Sign in"}
            </button>
          </div>
          <div className="w-full ">
            <ProtectedCanvas />
          </div>
        </div>
      </main>
    </>
  );
}

function ProtectedCanvas() {
  const [fullPathUrl, setFullPathUrl] = useState("");
  const canvasRef = useRef<HTMLCanvasElement | null>(null);
  const imageRef = useRef<HTMLImageElement | null>(null);

  const { mutate, data, isLoading } = api.herrkos.fetchBox.useMutation({
    onSuccess({ predictions }) {
      if (canvasRef) {
        if (!imageRef.current) {
          return;
        }
        if (!canvasRef.current) {
          return;
        }
        const ctx = canvasRef.current.getContext("2d");
        if (!ctx) {
          return;
        }
        console.log(imageRef.current.height, imageRef.current.width);

        const ratio =
          imageRef.current.width < imageRef.current.height
            ? imageRef.current.width / imageRef.current.height
            : imageRef.current.height / imageRef.current.width;
        console.log(ratio);
        // ctx.lineJoin = "bevel";
        ctx.canvas.width = imageRef.current.width;
        ctx.canvas.height = imageRef.current.height;
        if (predictions.at(0)?.box) {
          ctx.strokeRect(
            Number(predictions.at(0)?.box?.[0]) * ratio,
            Number(predictions.at(0)?.box[1]) * ratio,
            Number(predictions.at(0)?.box[2]) * ratio,
            Number(predictions.at(0)?.box[3]) * ratio
          );
        }
      }
    },
  });

  return (
    <div className="">
      <div className="flex w-full  justify-between">
        <div className="text-white">
          <details>
            <summary>Res</summary>
            {data && <pre>{JSON.stringify(data, null, 2)}</pre>}
          </details>
        </div>
        <div className="w-full max-w-[400px]">
          <input
            placeholder="Paste a link from unsplash"
            type="text"
            className="block w-full rounded-2xl"
            onBlur={(e) => {
              if (e.currentTarget.value) {
                mutate({
                  image_url: fullPathUrl,
                });
              }
            }}
            onInput={(e) => setFullPathUrl(e.currentTarget.value)}
            value={fullPathUrl}
          />
          <span className="text-right text-white">
            {isLoading && "Cooking..."}
          </span>
        </div>
      </div>
      <div className="mt-6 rounded-3xl bg-gray-900 p-6">
        <div className="relative h-full w-full overflow-hidden rounded-2xl">
          <canvas ref={canvasRef} className="absolute inset-0 h-full w-full" />
          <img
            ref={imageRef}
            src={fullPathUrl}
            className={` h-full w-full object-cover ${
              fullPathUrl ? "block" : "hidden"
            }`}
          />
        </div>
      </div>
    </div>
  );
}
